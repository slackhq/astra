syntax = "proto3";

package slack.proto.kaldb;

option java_package = "com.slack.kaldb.proto.metadata";

message CacheSlotMetadata {
  enum CacheSlotState {
    FREE = 0;
    ASSIGNED = 1;
    LOADING = 2;
    LIVE = 3;
    EVICT = 4;
    EVICTING = 5;
  };

  // Name of the cache slot
  string name = 1;

  // Unique ID of the replica
  string replica_id = 2;

  // State of the cache slot
  CacheSlotState cache_slot_state = 3;

  // Last updated timestamp
  int64 updated_time_epoch_ms = 4;
}

message ReplicaMetadata {
  // Name of the replica
  string name = 1;

  // Unique ID for the snapshot blob
  string snapshot_id = 2;

  // Last updated timestamp
  int64 created_time_epoch_ms = 4;

  // Timestamp after which this replica can be deleted
  int64 expire_after_epoch_ms = 5;
}

message SnapshotMetadata {
  // Name of the snapshot
  string name = 1;
  // Permanent id for a blob. This id is used to uniquely identify
  // the blob incase it get's copied around.
  // If not, should be same as name
  string snapshot_id = 2;

  // Path of the file stored in blobstore.
  string snapshot_path = 3;
  // earliest timestamp of the event in the snapshot file.
  int64 start_time_epoch_ms = 4;
  // End or latest timestamp of the event in the snapshot file.
  int64 end_time_epoch_ms = 5;

  // Kafka partitionId.
  string partition_id = 7;
  // Kafka offset when this snapshot was taken for that partition.
  int64 max_offset = 6;
}

message SearchMetadata {
  // Name of search metadata
  string name = 1;

  // snapshot name
  string snapshot_name = 2;

  // url
  string url = 3;
}

message RecoveryNodeMetadata {
  enum RecoveryNodeState {
    FREE = 0;
    ASSIGNED = 1;
    RECOVERING = 2;
  }

  // Name of recovery node
  string name = 1;

  // Name of the recovery task
  string recovery_task_name = 2;

  // State of the recovery node
  RecoveryNodeState recovery_node_state = 3;

  // Last updated timestamp
  int64 updated_time_epoch_ms = 4;
}

message RecoveryTaskMetadata {
  // Name of recovery node
  string name = 1;

  // Kafka partitionId.
  string partition_id = 2;

  // Kafka offset (inclusive) to start at
  int64 start_offset = 3;

  // Kafka offset (inclusive) to end at
  int64 end_offset = 4;

  // Created timestamp
  int64 created_time_epoch_ms = 5;
}
