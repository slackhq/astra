syntax = "proto3";
import "metadata.proto";
package slack.proto.kaldb;
option java_package = "com.slack.kaldb.proto.manager_api";

// ManagerApiService is the administration API for operating on dataset metadata and the associated partition assignments
service ManagerApiService {
  // CreateDataset initializes a new dataset in the metadata store with no initial allocated capacity
  rpc CreateDatasetMetadata(CreateDatasetMetadataRequest) returns (DatasetMetadata) {}
  // UpdateDataset updates an existing dataset with new metadata
  rpc UpdateDatasetMetadata(UpdateDatasetMetadataRequest) returns (DatasetMetadata) {}
  // GetDataset returns a single dataset metadata by name
  rpc GetDatasetMetadata(GetDatasetMetadataRequest) returns (DatasetMetadata) {}
  // ListDatasets returns all available datasets from the metadata store
  rpc ListDatasetMetadata(ListDatasetMetadataRequest) returns (ListDatasetMetadataResponse) {}

  // UpdatePartitionAssignment allocates a new partition assignment for a dataset. If a rate and a list of
  // partition_ids are provided, it will use it use the list of partition ids as the current allocation
  // and invalidates the existing assignment.
  //
  // In the future if only a rate is provided with an empty list the allocation will be automatically assigned.
  rpc UpdatePartitionAssignment(UpdatePartitionAssignmentRequest) returns (UpdatePartitionAssignmentResponse) {}

  rpc RestoreReplica(RestoreReplicaRequest) returns (RestoreReplicaResponse) {}
  rpc RestoreReplicaIds(RestoreReplicaIdsRequest) returns (RestoreReplicaIdsResponse) {}
}

// CreateDatasetMetadataRequest represents a new dataset with uninitialized thoughput and partition assignments
message CreateDatasetMetadataRequest {
  // Name of the dataset, must be unique
  string name = 1;
  // Owner information, maybe be any string
  string owner = 2;
}

// UpdateDatasetMetadataRequest represents a request to update an existing dataset
message UpdateDatasetMetadataRequest {
  // Unique name of the existing dataset
  string name = 1;
  // Owner information, maybe be any string
  string owner = 2;
}

// GetDatasetMetadataRequest represents a request to fetch an existing dataset
message GetDatasetMetadataRequest {
  // Must be an exact string name match
  string name = 1;
}

// ListDatasetMetadataRequest represents a request to list all existing datasets
message ListDatasetMetadataRequest {}

// ListDatasetMetadataResponse represents the response when listing all available datasets
message ListDatasetMetadataResponse {
  // List of datasets, excluding partition assignments
  repeated DatasetMetadata dataset_metadata = 1;
}

// UpdatePartitionAssignmentRequest represents a request to allocate a new set of partitions.
message UpdatePartitionAssignmentRequest {
  // Must be an exact string name match
  string name = 1;
  // Optional maximum throughput of the dataset - if set to -1 the existing value will not be updated
  int64 throughput_bytes = 2;
  // Optional desired partition IDs - if empty will be automatically assigned
  repeated string partition_ids = 3;
}

// UpdatePartitionAssignmentResponse represents the response after assigning a new set of partitions
message UpdatePartitionAssignmentResponse {
  // The assigned partition IDs
  repeated string assigned_partition_ids = 1;
}

message RestoreReplicaRequest {
  string service_name = 1;
  int64 start_time_epoch_ms = 2;
  int64 end_time_epoch_ms = 3;
}

message RestoreReplicaResponse {
  string status = 1;
}

message RestoreReplicaIdsRequest {
  repeated string ids_to_restore = 1;
}

message RestoreReplicaIdsResponse {
  string status = 1;
}
