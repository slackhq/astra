syntax = "proto3";

package slack.proto.astra;

option java_package = "com.slack.astra.proto.service";

import "schema.proto";

message SearchRequest {
  // Previously deleted field numbers
  reserved 3;

  // Data sets or chunk_ids to be searched
  string dataset = 1;
  repeated string chunk_ids = 2;

  // Query metadata
  int64 start_time_epoch_ms = 4;
  int64 end_time_epoch_ms = 5;
  int32 how_many = 6;

  // Only a single top-level aggregation is currently supported
  SearchAggregation aggregations = 7;

  // The fully query JSON object, to be used in the leaf nodes and parsed by OpenSearch
  string query = 8;

  // An explicit list of fields to include/exclude return per document
  SourceFieldFilter source_field_filter = 9;

  // The full agg JSON object, to be used in the leaf and query nodes and parsed by OpenSearch
  string aggregation_json = 10;

  message SourceFieldFilter {
    // Whether or not to include/exclude _all_ fields
    optional bool includeAll = 1;
    optional bool excludeAll = 2;

    // What fields to explicitly include/exclude
    map<string, bool> includeFields = 3;
    map<string, bool> excludeFields = 4;

    // Wildcarded field names to include/exclude
    repeated string includeWildcards = 5;
    repeated string excludeWildcards = 6;
  }

  message SearchAggregation {
    // The type of aggregation (ie, avg, date_histogram, etc)
    string type = 1;
    // A unique name for this aggregation request, to allow correlating
    // responses when multiple sibling aggregations are requested (ie, "1", "foo", etc)
    string name = 2;
    // Optional metadata
    map<string, Value> metadata = 3;
    // Any nested aggregations to perform. These may contain additional nested aggregations themselves,
    // and have sibling aggregations
    repeated SearchAggregation sub_aggregations = 4;

    oneof aggregation_type {
      // For aggregations operating on a field
      ValueSourceAggregation value_source = 5;

      // For aggregations operating on another bucket path
      PipelineAggregation pipeline = 6;

      // For filter aggregations as they are the only aggregation that is neither value source or pipeline based
      FiltersAggregation filters = 7;
    }

    message FiltersAggregation {
      map<string, FilterAggregation> filters = 1;
    }

    message FilterAggregation {
      string query_string = 1;

      bool analyze_wildcard = 2;
    }

    message ValueSourceAggregation {
      // Field name to use in aggregation
      string field = 1;

      // Value to substitute if no value is calculated
      Value missing = 2;

      // Script to execute, expected to be a string or null
      Value script = 3;

      oneof value_source_type {
        DateHistogramAggregation date_histogram = 11;
        TermsAggregation terms = 12;
        HistogramAggregation histogram = 13;
        AutoDateHistogramAggregation auto_date_histogram = 14;
        ExtendedStatsAggregation extended_stats = 15;
        UniqueCountAggregation unique_count = 16;
        PercentilesAggregation percentiles = 17;
      }

      // Unique fields specific to the histogram aggregation request
      message HistogramAggregation {
        // "10000" is how grafana sends the request
        string interval = 1;
        // Minimum documents per bucket required
        int64 min_doc_count = 2;
      }

      // Unique fields specific to the date histogram aggregation request
      message DateHistogramAggregation {
        // String representing the bucket size (ie, 10s, 1m)
        string interval = 1;
        // Minimum documents per bucket required
        int64 min_doc_count = 2;
        // String offset of the results. Should be less than the size of the requestd bucket (ie, 5s)
        string offset = 3;
        // Extended bounds - this is required when using a minimum document count of 0, otherwise
        // it is expected to be unused
        map<string, int64> extended_bounds = 4;
        // Format for the resulting buckets timestamps
        string format = 5;
        // Date zoneId if requesting with timezone option
        Value zoneId = 6;
      }

      // Unique fields specific to the auto date histogram aggregation request
      message AutoDateHistogramAggregation {
        // Value representing the minimum interval of the bucket size (ie, day, hour)
        Value min_interval = 1;
        // Exact number of buckets required
        Value num_buckets = 2;
      }

      // Unique fields specific to the terms aggregation request
      message TermsAggregation {
        // max number of terms to return
        int32 size = 1;

        // sort order, where key is an agg name or built-in (_terms, _count, etc) and value is direction (asc, desc)
        map<string, string> order = 2;

        // Minimum documents per bucket required
        int64 min_doc_count = 3;
      }

      // Unique fields specific to the unique count (cardinality) aggregation request
      message UniqueCountAggregation {
        // Precision threshold for cardinality
        Value precision_threshold = 1;
      }

      // Unique fields specific to the extended stats aggregation request
      message ExtendedStatsAggregation {
        // Optional sigma
        Value sigma = 1;
      }

      // Unique fields specific to the percentiles aggregation request
      message PercentilesAggregation {
        repeated double percentiles = 1;
      }
    }

    message PipelineAggregation {
      // Bucket path to use for pipeline aggregation
      string buckets_path = 1;

      oneof type {
        MovingAverageAggregation moving_average = 11;
        DerivativeAggregation derivative = 12;
        CumulativeSumAggregation cumulative_sum = 13;
        MovingFunctionAggregation moving_function = 14;
      }

      message MovingAverageAggregation {
        // Moving average model, one of simple/linear/ewma/holt/holt_winters
        string model = 1;

        // Moving average window, applies to all models
        int32 window = 2;

        // Number of predictions to return. applies to all models
        int32 predict = 3;

        // Applies to ewma/holt/holt_winters
        double alpha = 4;

        // Applies to holt/holt_winters
        double beta = 5;

        // Applies only to holt_winters
        double gamma = 6;

        // Applies only to holt_winters
        int32 period = 7;

        // Indicates if model should be fit to data using cost minimization
        // Applies to ewma/holt/holt_winters
        bool minimize = 8;

        // Applies only to holt_winters
        bool pad = 9;
      }

      message CumulativeSumAggregation {
        // Optional format
        Value format = 1;
      }

      message DerivativeAggregation {
        // Optional unit for derivative
        Value unit = 1;
      }

      message MovingFunctionAggregation {
        // Moving function window, required
        int32 window = 1;

        // Moving function shift, optional
        int32 shift = 2;

        // Script to execute, required
        string script = 3;
      }
    }
  }
}

message SearchResult {
  repeated string hits = 3;
  bytes internal_aggregations = 4;
  int64 took_micros = 5;

  int32 failed_nodes = 6;
  int32 total_nodes = 7;
  int32 total_snapshots = 8;
  int32 snapshots_with_replicas = 9;
}

// Based off of https://github.com/protocolbuffers/protobuf/blob/main/src/google/protobuf/struct.proto
// This allows for better support for a Map<String, Object> in Java
message Value {
  oneof kind {
    int32 int_value = 1;
    int64 long_value = 2;
    double double_value = 3;
    string string_value = 4;
    bool bool_value = 5;
    Struct struct_value = 6;
    ListValue list_value = 7;
    NullValue null_value = 8;
  }
}

message Struct {
  map<string, Value> fields = 1;
}

message ListValue {
  repeated Value values = 1;
}

enum NullValue {
  NULL_VALUE = 0;
}

message SchemaRequest {
  // Data sets or chunk_ids to be searched
  string dataset = 1;
  repeated string chunk_ids = 2;
  int64 start_time_epoch_ms = 3;
  int64 end_time_epoch_ms = 4;
}

message SchemaResult {
  // Map of field name, to field definition
  map<string, SchemaDefinition> field_definition = 1;
}
message SchemaDefinition {
  // Field type as defined by Astra
  slack.proto.astra.schema.SchemaFieldType type = 1;
  // Any field-specific metadata to be included
  // map<string, Value> metadata = 2;
}

service AstraService {
  rpc Search (SearchRequest) returns (SearchResult) {}
  rpc Schema (SchemaRequest) returns (SchemaResult) {}
}
