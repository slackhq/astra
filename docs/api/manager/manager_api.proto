syntax = "proto3";
package slack.proto.astra;
option java_package = "com.slack.astra.proto.manager_api";
option go_package = "slack.com/astra/proto/manager_api";
import "annotations.proto";

// Describes a set of partitions along with their effective start and end times
message DatasetPartitionMetadata {
  // Start time this partition received traffic
  int64 start_time_epoch_ms = 1;

  // End time this partition received traffic
  int64 end_time_epoch_ms = 2;

  // List of Kafka partition ids
  repeated string partitions = 3;
}
// Describes ownership, throughput, and partition mapping for a given dataset
message DatasetMetadata {
  // Unique name for provisioned service
  string name = 1;

  // Service owner information (ie team name)
  string owner = 2;

  // Service throughput max
  int64 throughput_bytes = 3;

  // List of partitions assigned to this service, and their effective times
  repeated DatasetPartitionMetadata partition_configs = 4;

  // either same as name or a special value _all or * which matches all services
  string service_name_pattern = 5;
}


// ManagerApiService is the administration API for operating on dataset metadata and the associated partition assignments
service ManagerApiService {
  // CreateDataset initializes a new dataset in the metadata store with no initial allocated capacity
  rpc CreateDatasetMetadata(CreateDatasetMetadataRequest) returns (DatasetMetadata) {
    option (google.api.http) = {
      post: "/slack.proto.astra.ManagerApiService/CreateDatasetMetadata"
    };
  }
  // UpdateDataset updates an existing dataset with new metadata
  rpc UpdateDatasetMetadata(UpdateDatasetMetadataRequest) returns (DatasetMetadata) {
    option (google.api.http) = {
      post: "/slack.proto.astra.ManagerApiService/UpdateDatasetMetadata"
    };
  }
  // GetDataset returns a single dataset metadata by name
  rpc GetDatasetMetadata(GetDatasetMetadataRequest) returns (DatasetMetadata) {
    option (google.api.http) = {
      post: "/slack.proto.astra.ManagerApiService/GetDatasetMetadata"
    };
  }
  // ListDatasets returns all available datasets from the metadata store
  rpc ListDatasetMetadata(ListDatasetMetadataRequest) returns (ListDatasetMetadataResponse) {
    option (google.api.http) = {
      post: "/slack.proto.astra.ManagerApiService/ListDatasetMetadata"
    };
  }

  // UpdatePartitionAssignment allocates a new partition assignment for a dataset. If a rate and a list of
  // partition_ids are provided, it will use it use the list of partition ids as the current allocation
  // and invalidates the existing assignment.
  //
  // In the future if only a rate is provided with an empty list the allocation will be automatically assigned.
  rpc UpdatePartitionAssignment(UpdatePartitionAssignmentRequest) returns (UpdatePartitionAssignmentResponse) {
    option (google.api.http) = {
      post: "/slack.proto.astra.ManagerApiService/UpdatePartitionAssignment"
    };
  }

  rpc RestoreReplica(RestoreReplicaRequest) returns (RestoreReplicaResponse) {
    option (google.api.http) = {
      post: "/slack.proto.astra.ManagerApiService/RestoreReplica"
    };
  }
  rpc RestoreReplicaIds(RestoreReplicaIdsRequest) returns (RestoreReplicaIdsResponse) {
    option (google.api.http) = {
      post: "/slack.proto.astra.ManagerApiService/RestoreReplicaIds"
    };
  }
}

// CreateDatasetMetadataRequest represents a new dataset with uninitialized thoughput and partition assignments
message CreateDatasetMetadataRequest {
  // Name of the dataset, must be unique
  string name = 1;
  // Owner information, maybe be any string
  string owner = 2;
  // The service name pattern that the dataset is indexing
  string service_name_pattern = 3;
}

// UpdateDatasetMetadataRequest represents a request to update an existing dataset
message UpdateDatasetMetadataRequest {
  // Unique name of the existing dataset
  string name = 1;
  // Owner information, maybe be any string
  string owner = 2;
  // The service name pattern that the dataset is indexing
  string service_name_pattern = 3;
}

// GetDatasetMetadataRequest represents a request to fetch an existing dataset
message GetDatasetMetadataRequest {
  // Must be an exact string name match
  string name = 1;
}

// ListDatasetMetadataRequest represents a request to list all existing datasets
message ListDatasetMetadataRequest {}

// ListDatasetMetadataResponse represents the response when listing all available datasets
message ListDatasetMetadataResponse {
  // List of datasets, excluding partition assignments
  repeated DatasetMetadata dataset_metadata = 1;
}

// UpdatePartitionAssignmentRequest represents a request to allocate a new set of partitions.
message UpdatePartitionAssignmentRequest {
  // Must be an exact string name match
  string name = 1;
  // Optional maximum throughput of the dataset - if set to -1 the existing value will not be updated
  int64 throughput_bytes = 2;
  // Optional desired partition IDs - if empty will be automatically assigned
  repeated string partition_ids = 3;
}

// UpdatePartitionAssignmentResponse represents the response after assigning a new set of partitions
message UpdatePartitionAssignmentResponse {
  // The assigned partition IDs
  repeated string assigned_partition_ids = 1;
}

message RestoreReplicaRequest {
  string service_name = 1;
  int64 start_time_epoch_ms = 2;
  int64 end_time_epoch_ms = 3;
}

message RestoreReplicaResponse {
  string status = 1;
}

message RestoreReplicaIdsRequest {
  repeated string ids_to_restore = 1;
}

message RestoreReplicaIdsResponse {
  string status = 1;
}
