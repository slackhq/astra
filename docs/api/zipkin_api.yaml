#
# Copyright 2018-2024 The OpenZipkin Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
# in compliance with the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License
# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
# or implied. See the License for the specific language governing permissions and limitations under
# the License.

# https://github.com/openzipkin/zipkin-api/blob/master/zipkin2-api.yaml

openapi: 3.0.0
info:
  title: Zipkin compatible API
  version: alpha
paths:
  /api/v2/trace/{traceId}:
    get:
      parameters:
        - name: traceId
          in: path
          required: true
          schema:
              type: string
          description: |
            Trace identifier, set on all spans within it.
        - name: startTimeEpochMs
          in: query
          schema:
              type: number
          description: |
            Start time filter in epoch milliseconds
        - name: startTimeEpochMs
          in: query
          schema:
              type: number
          description: |
            End time filter in epoch milliseconds
        - name: startTimeEpochMs
          in: query
          schema:
              type: integer
          description: |
            Maximum number of spans to return
      summary: Get trace by ID
      description: Retrieve all spans matching a given trace ID
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trace'

  /api/v2/traces:
    get:
      summary: Search traces
      responses:
        '200':
          description: Not implemented
          content:
            application/json:
              schema:
                type: object
  /api/v2/services:
    get:
      summary: List services
      responses:
        '200':
          description: Not implemented
          content:
            application/json:
              schema:
                type: object
  /api/v2/spans:
    get:
      summary: List spans by service
      responses:
        '200':
          description: Not implemented
          content:
            application/json:
              schema:
                type: object

components:
  schemas:
    Endpoint:
      type: object
      title: Endpoint
      description: The network context of a node in the service graph
      properties:
        serviceName:
          type: string
          description: |
            Lower-case label of this node in the service graph, such as "favstar". Leave
            absent if unknown.
            
            This is a primary label for trace lookup and aggregation, so it should be
            intuitive and consistent. Many use a name from service discovery.
        ipv4:
          type: string
          format: ipv4
          description: |
            The text representation of the primary IPv4 address associated with this
            connection. Ex. 192.168.99.100 Absent if unknown.
        ipv6:
          type: string
          format: ipv6
          description: |
            The text representation of the primary IPv6 address associated with a
            connection. Ex. 2001:db8::c001 Absent if unknown.
            
            Prefer using the ipv4 field for mapped addresses.
        port:
          type: integer
          description: |
            Depending on context, this could be a listen port or the client-side of a
            socket. Absent if unknown. Please don't set to zero.
    Annotation:
      title: Annotation
      type: object
      description: |
        Associates an event that explains latency with a timestamp.
        Unlike log statements, annotations are often codes. Ex. "ws" for WireSend
        
        Zipkin v1 core annotations such as "cs" and "sr" have been replaced with
        Span.Kind, which interprets timestamp and duration.
      required:
        - timestamp
        - value
      properties:
        timestamp:
          type: integer
          format: int64
          description: |
            Epoch **microseconds** of this event.
            
            For example, 1502787600000000 corresponds to 2017-08-15 09:00 UTC
            
            This value should be set directly by instrumentation, using the most precise
            value possible. For example, gettimeofday or multiplying epoch millis by 1000.
        value:
          type: string
          description: |
            Usually a short tag indicating an event, like "error"
            
            While possible to add larger data, such as garbage collection details, low
            cardinality event names both keep the size of spans down and also are easy
            to search against.
    Tags:
      type: object
      title: Tags
      description: |
        Adds context to a span, for search, viewing and analysis.
        
        For example, a key "your_app.version" would let you lookup traces by version.
        A tag "sql.query" isn't searchable, but it can help in debugging when viewing
        a trace.
      additionalProperties:
        type: string
    ListOfSpans:
      title: ListOfSpans
      description: 'A list of spans with possibly different trace ids, in no particular order'
      type: array
      items:
        $ref: "#/components/schemas/Span"
    Trace:
      title: Trace
      type: array
      description: 'List of spans who have the same trace ID.'
      items:
        $ref: "#/components/schemas/Span"
    ListOfTraces:
      title: ListOfTraces
      type: array
      items:
        $ref: "#/components/schemas/Trace"
    Span:
      title: Span
      description: |
        A span is a single-host view of an operation. A trace is a series of spans
        (often RPC calls) which nest to form a latency tree. Spans are in the same
        trace when they share the same trace ID. The parent_id field establishes the
        position of one span in the tree.
        
        The root span is where parent_id is Absent and usually has the longest
        duration in the trace. However, nested asynchronous work can materialize as
        child spans whose duration exceed the root span.
        
        Spans usually represent remote activity such as RPC calls, or messaging
        producers and consumers. However, they can also represent in-process
        activity in any position of the trace. For example, a root span could
        represent a server receiving an initial client request. A root span could
        also represent a scheduled job that has no remote context.
      type: object
      required:
        - traceId
        - id
      properties:
        traceId:
          type: string
          maxLength: 32
          minLength: 16
          pattern: "[a-f0-9]{16,32}"
          description: |
            Randomly generated, unique identifier for a trace, set on all spans within it.
            
            Encoded as 16 or 32 lowercase hex characters corresponding to 64 or 128 bits.
            For example, a 128bit trace ID looks like 4e441824ec2b6a44ffdc9bb9a6453df3
        name:
          type: string
          description: |
            The logical operation this span represents in lowercase (e.g. rpc method).
            Leave absent if unknown.
            
            As these are lookup labels, take care to ensure names are low cardinality.
            For example, do not embed variables into the name.
        parentId:
          type: string
          pattern: "[a-f0-9]{16}"
          maxLength: 16
          minLength: 16
          description: 'The parent span ID or absent if this the root span in a trace.'
        id:
          type: string
          pattern: "[a-f0-9]{16}"
          maxLength: 16
          minLength: 16
          description: |
            Unique 64bit identifier for this operation within the trace.
            
            Encoded as 16 lowercase hex characters. For example ffdc9bb9a6453df3
        kind:
          type: string
          enum:
            - CLIENT
            - SERVER
            - PRODUCER
            - CONSUMER
          description: |
            When present, kind clarifies timestamp, duration and remoteEndpoint. When
            absent, the span is local or incomplete. Unlike client and server, there
            is no direct critical path latency relationship between producer and
            consumer spans.
            
            * `CLIENT`
              * timestamp is the moment a request was sent to the server. (in v1 "cs")
              * duration is the delay until a response or an error was received. (in v1 "cr"-"cs")
              * remoteEndpoint is the server. (in v1 "sa")
            * `SERVER`
              * timestamp is the moment a client request was received. (in v1 "sr")
              * duration is the delay until a response was sent or an error. (in v1 "ss"-"sr")
              * remoteEndpoint is the client. (in v1 "ca")
            * `PRODUCER`
              * timestamp is the moment a message was sent to a destination. (in v1  "ms")
              * duration is the delay sending the message, such as batching.
              * remoteEndpoint is the broker.
            * `CONSUMER`
              * timestamp is the moment a message was received from an origin. (in v1 "mr")
              * duration is the delay consuming the message, such as from backlog.
              * remoteEndpoint - Represents the broker. Leave serviceName absent if unknown.
        timestamp:
          type: integer
          format: int64
          description: |
            Epoch microseconds of the start of this span, possibly absent if
            incomplete.
            
            For example, 1502787600000000 corresponds to 2017-08-15 09:00 UTC
            
            This value should be set directly by instrumentation, using the most
            precise value possible. For example, gettimeofday or multiplying epoch
            millis by 1000.
            
            There are three known edge-cases where this could be reported absent.
             * A span was allocated but never started (ex not yet received a timestamp)
             * The span's start event was lost
             * Data about a completed span (ex tags) were sent after the fact
        duration:
          type: integer
          format: int64
          minimum: 1
          description: |
            Duration in **microseconds** of the critical path, if known. Durations of less
            than one are rounded up. Duration of children can be longer than their
            parents due to asynchronous operations.
            
            For example 150 milliseconds is 150000 microseconds.
        debug:
          type: boolean
          description: |
            True is a request to store this span even if it overrides sampling policy.
            
            This is true when the `X-B3-Flags` header has a value of 1.
        shared:
          type: boolean
          description: 'True if we are contributing to a span started by another tracer (ex on a different host).'
        localEndpoint:
          $ref: "#/components/schemas/Endpoint"
          description: |
            The host that recorded this span, primarily for query by service name.
            
            Instrumentation should always record this. Usually, absent implies late
            data. The IP address corresponding to this is usually the site local or
            advertised service address. When present, the port indicates the listen
            port.
        remoteEndpoint:
          $ref: "#/components/schemas/Endpoint"
          description: |
            When an RPC (or messaging) span, indicates the other side of the
            connection.
            
            By recording the remote endpoint, your trace will contain network context
            even if the peer is not tracing. For example, you can record the IP from
            the `X-Forwarded-For` header or the service name and socket of a remote
            peer.
        annotations:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Annotation'
          description: 'Associates events that explain latency with the time they happened.'
        tags:
          $ref: '#/components/schemas/Tags'
          description: 'Tags give your span context for search, viewing and analysis.'
      example:
        id: "352bff9a74ca9ad2"
        traceId: "5af7183fb1d4cf5f"
        parentId: "6b221d5bc9e6496c"
        name: "get /api"
        timestamp: 1556604172355737
        duration: 1431
        kind: "SERVER"
        localEndpoint:
          serviceName: "backend"
          ipv4: "192.168.99.1"
          port: 3306
        remoteEndpoint:
          ipv4: "172.19.0.2"
          port: 58648
        tags:
          http.method: "GET"
          http.path: "/api"
    DependencyLink:
      title: DependencyLink
      description: |
        The count of traced calls between services, or between a service and a broker.
        
        The direction of the link is parent to child, and can be one of:
         * client to server
         * producer to broker
         * broker to consumer
        
        Note: This is related to span ID count between a sender and receiver, but there
        is nuance that makes it more difficult than counting unique span IDs. Ex. the
        parent or child might be uninstrumented: detected via the remote endpoint. There
        can also be scenarios where both sides are instrumented. Please use existing tools
        such as zipkin-dependencies to derive links as they avoid under or over counting.
      type: object
      required:
        - parent
        - child
        - callCount
      properties:
        parent:
          type: string
          description: 'The service name of the caller: client or message producer or broker.'
        child:
          type: string
          description: 'The service name of the callee: server or message consumer or broker.'
        callCount:
          type: integer
          description: 'Total traced calls made from the parent to the child.'
        errorCount:
          type: integer
          description: 'Total traced calls made from the parent to the child known to be in error.'
